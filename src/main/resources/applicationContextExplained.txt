- Autant de balises bean qu'il y a de classes à instancier
- Dans l'exemple il y en a 3 (1 repository, 1 service, 1 controleur)
- bean class -> le nom de la classe, package entier inclus

Spring -> Inversion de controle : instanciation
<bean class="com.udemy.service.InvoiceServicePrefix"/>
<bean class="com.udemy.controller.InvoiceControllerWeb"/>
<bean class="com.udemy.repository.InvoiceRepositoryDatabase"/>

Spring -> Injection de dépendance : injection de mon bean repository dans mon bean service par reference
<bean class="com.udemy.service.InvoiceServicePrefix">
        <property name="invoiceRepository" ref="invoiceRepositoryReference"/>
</bean>
<bean class="com.udemy.controller.InvoiceControllerWeb"/>
<bean id="invoiceRepositoryReference" class="com.udemy.repository.InvoiceRepositoryDatabase"/>

- l'id d'un balise bean enfant sert à le placer en référence dans un autre bean à travers la balise property et attribut reference du bean parent
- le name d'un balise property d'un bean identifie explicitement l'attribut "dépendance" de la classe qui représente ce bean

- Présence obligatoire d'un setter
<bean class="com.udemy.controller.InvoiceControllerWeb">
        <property name="invoiceService" ref="invoiceServiceReference"/>
    </bean>
--> Il faut dans l'exemple ci-dessus que la classe InvoiceControllerWeb ai son attribut "dependance" invoiceService qui à un setter de défini
--> La classe doit etre au format java bean
--> l'id d'un bean n'est pas obligatoire (ici la couche controller, si le bean n'est injecté nulle part), si on en a pas besoin en référence ailleurs

-> C'est la dependance spring context qui permet de faire cette injection de dépendance, a mettre dans le pom.xml
-> en la mettant puis en rechargent maven dans le pom.xml, on peut voir dans intellij les librairies externes qui sont rajoutées, il ya des
librairies transitives a spring-context comme spring-aop par exemple