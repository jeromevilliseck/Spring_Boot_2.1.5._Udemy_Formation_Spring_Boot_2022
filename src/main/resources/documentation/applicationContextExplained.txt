- Autant de balises bean qu'il y a de classes à instancier
- Dans l'exemple il y en a 3 (1 repository, 1 service, 1 controleur)
- bean class -> le nom de la classe, package entier inclus

Spring -> Inversion de controle : instanciation
<bean class="com.udemy.service.prefix.InvoiceServicePrefix"/>
<bean class="com.udemy.controller.web.InvoiceControllerWeb"/>
<bean class="com.udemy.repository.database.InvoiceRepositoryDatabase"/>

Spring -> Injection de dépendance : injection de mon bean repository dans mon bean service par reference
<bean class="com.udemy.service.prefix.InvoiceServicePrefix">
        <property name="invoiceRepository" ref="invoiceRepositoryReference"/>
</bean>
<bean class="com.udemy.controller.web.InvoiceControllerWeb"/>
<bean id="invoiceRepositoryReference" class="com.udemy.repository.database.InvoiceRepositoryDatabase"/>

- l'id d'un balise bean enfant sert à le placer en référence dans un autre bean à travers la balise property et attribut reference du bean parent
- le name d'un balise property d'un bean identifie explicitement l'attribut "dépendance" de la classe qui représente ce bean

- Présence obligatoire d'un setter
<bean class="com.udemy.controller.web.InvoiceControllerWeb">
        <property name="invoiceService" ref="invoiceServiceReference"/>
    </bean>
--> Il faut dans l'exemple ci-dessus que la classe InvoiceControllerWeb ai son attribut "dependance" invoiceService qui à un setter de défini
--> La classe doit etre au format java bean
--> l'id d'un bean n'est pas obligatoire (ici la couche controller, si le bean n'est injecté nulle part), si on en a pas besoin en référence ailleurs

-> C'est la dependance spring context qui permet de faire cette injection de dépendance, a mettre dans le pom.xml
-> en la mettant puis en rechargent maven dans le pom.xml, on peut voir dans intellij les librairies externes qui sont rajoutées, il ya des
librairies transitives a spring-context comme spring-aop par exemple

- Setter les attributs d'un bean -> ici lastNumber de la classe InvoiceServicePrefix prendra la valeur 112
- Il y a une conversion automatique de types
<bean id="invoiceServiceReference" class="com.udemy.service.prefix.InvoiceServicePrefix">
        <property name="invoiceRepository" ref="invoiceRepositoryReference"/>
        <property name="lastNumber" value="112"></property>
        <property name="prefix" value="INV_"></property>
</bean>

-----EN TETE DU FICHIER XML

<context:annotation-config>
--> context est un espace de nommage spécifique -> ici correspond a External Librairies -> Maven: org.spring-context -> puis la dépendance transitive -> spring beans
--> et la balise annotation-config est exploitée via la librairie spring-context

xmlns="http://www.springframework.org/schema/beans"
--> l'espace de nommage par defaut pour les beans prends cette norme la

xsi:schemaLocation
-->reference un fichier xsd, qui explique la grammaire de l'espace de nommage, sous entendu les balises que l'on peut utiliser et comment elles fonctionnent
-->ce fichier se trouve dans la librairie spring beans


---ANNOTATION SPRING BOOT
@Configuration
@ComponentScan -> si pas de basePackages, scanne tous les packages situé au niveau de la classe APP et en dessous
@PropertySource -> indique avec classpath l'emplacement des fichiers de propriétés, par defaut spring recherche un fichier application.properties, elle peut etre retirée

@Configuration + @ComponentScan + @PropertySource = @SpringBootApplication

---COMPILATION AVEC SPRING BOOT PLUGIN
1)
> mvn clean install
à la racine du projet avec le plugin spring-boot-maven-plugin placé dans le pom.xml (obligatoire)

générera
BOOT-INF -> classes -> fichiers de proppriétés
BOOT-INF -> lib -> toutes les librairies dont a besoin
fera le MANIFEST.MF
2)
-> avec la classe à executer celle qui bénéficie du @SpringBootApplication (obligatoire)
-> mais également les classes faisant partie du classpath

3)
La classe principale de l'application doit contenir SpringApplication.run()